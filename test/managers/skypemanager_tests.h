#include "favor.h"
#include "accountmanager.h"
#include "gtest/gtest.h"
#include "skypemanager.h"
#include "skype_testdata.h"


//TODO: this test should be based on a fixture that generates a database with a skype account pre-inserted, which we use for
//all of our tests. unfortunately can't use the default generated by test data because the location will be different

#define SKYPE_TEST_DB_LOC "/home/josh/.Skype/joshua.tanner/main.db"
#define SKYPE_ACCOUNT_NAME "joshua.tanner"
#define SKYPE_CONTACT_NAME ""
#define SKYPE_CONTACT_NAME2 ""

//These are the 4 tables we actually make use of
/*
 *  #define SKYPE_MSG_TABLE_NAME "Messages"
    #define SKYPE_ACCOUNTS_TABLE_NAME "Accounts"
    #define SKYPE_PARTICIPANTS_TABLE_NAME "Participants"
    #define SKYPE_TRANSFERS_TABLE_NAME "Transfers"

 */

namespace favor {

class SkypeManagerTest : public DatabaseTest {
protected:

    void populateDb(){
        string sql = "BEGIN IMMEDIATE TRANSACTION;";
        sql += contactSeed;
        sql += addressSeed;
        sql += accountSeed;
        sql += "COMMIT TRANSACTION;";

        worker::exec(sql);

        sqlite3 *db;
        sqlv(sqlite3_open(SKYPE_MEMORY_DB, &db));
        sql.clear();
        sql += SKYPE_SQLITE_SCHEMA;
        sqlv(sqlite3_exec(db, sql.c_str(), NULL, NULL, NULL));
    }


    virtual void SetUp() override {
        DatabaseTest::SetUp();
        populateDb();
        reader::refreshAll(); //These values are expected to be correct in other methods, so it tests the refresh methods
    }

    virtual void TearDown() override {
        DatabaseTest::TearDown();
    }
};


TEST(SkypeManager, General){

    //TODO: test on bigger data; figure out why fetches about Z are failing to save some messages

    initialize();
    worker::buildDatabase();
    //reader::refreshAll();

    AccountManager::addAccount(SKYPE_ACCOUNT_NAME, TYPE_SKYPE, "{\"skypeDatabaseLocation\":\"" SKYPE_TEST_DB_LOC "\"}");
    worker::createContactWithAddress(SKYPE_CONTACT_NAME,TYPE_SKYPE, "SKYPE_TEST");
    reader::accountList()->front()->updateMessages();
    DLOG("Test sum:"+as_string(reader::sum(reader::accountList()->front(),reader::contactList()->front(), KEY_CHARCOUNT, -1, -1, true)));
    worker::createContactWithAddress(SKYPE_CONTACT_NAME2, TYPE_SKYPE, "SKYPE_TEST2");
    reader::accountList()->front()->updateMessages();
    DLOG("Test sum:"+as_string(reader::sum(reader::accountList()->front(),reader::contactList()->front(), KEY_CHARCOUNT, -1, -1, true)));

    reader::accountList()->front()->updateAddresses();

    //worker::createContactWithAddress("GIGGLE", TYPE_LINE, "GIGGLE_WIGGLE");

    worker::backupDatabase();


}


}